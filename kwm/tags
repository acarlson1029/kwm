!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Active	types.h	/^    bool Active;$/;"	m	struct:kwm_prefix
ActiveCount	types.h	/^    unsigned int ActiveCount;$/;"	m	struct:kwm_screen
ActiveSpace	types.h	/^    int ActiveSpace;$/;"	m	struct:screen_info
AddWindowToBSPTree	window.cpp	/^void AddWindowToBSPTree()$/;"	f
AddWindowToBSPTree	window.cpp	/^void AddWindowToBSPTree(screen_info *Screen, int WindowID)$/;"	f
AddWindowToMonocleTree	window.cpp	/^void AddWindowToMonocleTree(screen_info *Screen, int WindowID)$/;"	f
AddWindowToTreeOfUnfocusedMonitor	window.cpp	/^void AddWindowToTreeOfUnfocusedMonitor(screen_info *Screen, window_info *Window)$/;"	f
AllowRoleForApplication	window.cpp	/^void AllowRoleForApplication(std::string Application, std::string Role)$/;"	f
AllowedWindowRoles	types.h	/^    std::map<std::string, std::vector<CFTypeRef> > AllowedWindowRoles;$/;"	m	struct:kwm_tiling
Alpha	types.h	/^    double Alpha;$/;"	m	struct:color
AltKey	types.h	/^    bool AltKey;$/;"	m	struct:modifiers
Application	types.h	/^    AXUIElementRef Application;$/;"	m	struct:kwm_focus
ApplyNodeContainer	tree.cpp	/^void ApplyNodeContainer(tree_node *Node, space_tiling_option Mode)$/;"	f
Assert	types.h	/^    #define Assert(/;"	d
BORDER_H	border.h	/^#define BORDER_H$/;"	d
BSPLayouts	types.h	/^    std::string BSPLayouts;$/;"	m	struct:kwm_path
BSP_WINDOW_EVENT_CALLBACK	types.h	/^#define BSP_WINDOW_EVENT_CALLBACK(/;"	d
Blue	types.h	/^    double Blue;$/;"	m	struct:color
CGEventCallback	kwm.cpp	/^CGEventRef CGEventCallback(CGEventTapProxy Proxy, CGEventType Type, CGEventRef Event, void *Refcon)$/;"	f
CGSDefaultConnection	types.h	/^#define CGSDefaultConnection /;"	d
CGSSpaceTypeUser	types.h	/^#define CGSSpaceTypeUser /;"	d
CONTAINER_H	container.h	/^#define CONTAINER_H$/;"	d
Cache	types.h	/^    window_info Cache;$/;"	m	struct:kwm_focus
CaptureApplication	window.cpp	/^void CaptureApplication(window_info *Window)$/;"	f
CaptureApplicationToScreen	display.cpp	/^void CaptureApplicationToScreen(int ScreenID, std::string Application)$/;"	f
CapturedAppLst	types.h	/^    std::map<std::string, int> CapturedAppLst;$/;"	m	struct:kwm_tiling
CenterWindow	window.cpp	/^void CenterWindow(screen_info *Screen, window_info *Window)$/;"	f
CenterWindowInsideNodeContainer	window.cpp	/^void CenterWindowInsideNodeContainer(AXUIElementRef WindowRef, int *Xptr, int *Yptr, int *Wptr, int *Hptr)$/;"	f
ChangeGapOfDisplay	display.cpp	/^void ChangeGapOfDisplay(const std::string &Side, int Offset)$/;"	f
ChangePaddingOfDisplay	display.cpp	/^void ChangePaddingOfDisplay(const std::string &Side, int Offset)$/;"	f
ChangeSplitRatio	container.cpp	/^void ChangeSplitRatio(double Value)$/;"	f
CheckArguments	kwm.cpp	/^bool CheckArguments(int argc, char **argv)$/;"	f
CheckPrefixTimeout	keys.cpp	/^void CheckPrefixTimeout()$/;"	f
CheckPrivileges	kwm.cpp	/^bool CheckPrivileges()$/;"	f
ClearBorder	border.cpp	/^void ClearBorder(kwm_border *Border)$/;"	f
ClearFocusedWindow	window.cpp	/^void ClearFocusedWindow()$/;"	f
ClearMarkedWindow	window.cpp	/^void ClearMarkedWindow()$/;"	f
CloseBorder	border.cpp	/^void CloseBorder(kwm_border *Border)$/;"	f
CmdKey	types.h	/^    bool CmdKey;$/;"	m	struct:modifiers
Color	types.h	/^    color Color;$/;"	m	struct:kwm_border
Command	types.h	/^    std::string Command;$/;"	m	struct:hotkey
ConfigFile	types.h	/^    std::string ConfigFile;$/;"	m	struct:kwm_path
ConfigFolder	types.h	/^    std::string ConfigFolder;$/;"	m	struct:kwm_path
Container	types.h	/^    node_container Container;$/;"	m	struct:tree_node
ContainerLeft	types.h	/^    ContainerLeft,$/;"	e	enum:container_type
ContainerLower	types.h	/^    ContainerLower$/;"	e	enum:container_type
ContainerRight	types.h	/^    ContainerRight,$/;"	e	enum:container_type
ContainerRoot	types.h	/^    ContainerRoot,$/;"	e	enum:container_type
ContainerUpper	types.h	/^    ContainerUpper,$/;"	e	enum:container_type
ConvertHexRGBAToColor	helpers.cpp	/^color ConvertHexRGBAToColor(unsigned int Color)$/;"	f
ConvertHexStringToInt	helpers.cpp	/^unsigned int ConvertHexStringToInt(std::string HexString)$/;"	f
ConvertStringToDouble	helpers.cpp	/^double ConvertStringToDouble(std::string Double)$/;"	f
ConvertStringToInt	helpers.cpp	/^int ConvertStringToInt(std::string Integer)$/;"	f
CreateApplicationNotifications	notifications.cpp	/^void CreateApplicationNotifications()$/;"	f
CreateBSPTree	tree.cpp	/^bool CreateBSPTree(tree_node *RootNode, screen_info *Screen, std::vector<window_info*> *WindowsPtr)$/;"	f
CreateColorFormat	helpers.cpp	/^void CreateColorFormat(color *Color)$/;"	f
CreateDefaultScreenInfo	display.cpp	/^screen_info CreateDefaultScreenInfo(int DisplayIndex, int ScreenIndex)$/;"	f
CreateDefaultScreenOffset	display.cpp	/^container_offset CreateDefaultScreenOffset()$/;"	f
CreateDeserializedNodeContainer	serialize.cpp	/^void CreateDeserializedNodeContainer(tree_node *Node)$/;"	f
CreateLeafNode	node.cpp	/^tree_node *CreateLeafNode(screen_info *Screen, tree_node *Parent, int WindowID, const container_type &ContainerType)$/;"	f
CreateLeafNodePair	node.cpp	/^void CreateLeafNodePair(screen_info *Screen, tree_node *Parent, int FirstWindowID, int SecondWindowID, const split_mode &SplitMode)$/;"	f
CreateMonocleTree	tree.cpp	/^bool CreateMonocleTree(tree_node *RootNode, screen_info *Screen, std::vector<window_info*> *WindowsPtr)$/;"	f
CreateNodeContainer	container.cpp	/^node_container CreateNodeContainer(screen_info *Screen, const node_container &ParentContainer, const container_type &ContainerType)$/;"	f
CreateNodeContainerPair	container.cpp	/^void CreateNodeContainerPair(screen_info *Screen, tree_node *Parent, const split_mode &SplitMode)$/;"	f
CreateNodeContainers	tree.cpp	/^void CreateNodeContainers(screen_info *Screen, tree_node *Node, bool OptimalSplit)$/;"	f
CreateRootNode	node.cpp	/^tree_node *CreateRootNode()$/;"	f
CreateStringFromTokens	helpers.cpp	/^std::string CreateStringFromTokens(std::vector<std::string> Tokens, int StartIndex)$/;"	f
CreateTreeFromWindowIDList	tree.cpp	/^tree_node *CreateTreeFromWindowIDList(screen_info *Screen, std::vector<window_info*> *WindowsPtr)$/;"	f
CreateWindowNodeTree	window.cpp	/^void CreateWindowNodeTree(screen_info *Screen, std::vector<window_info*> *Windows)$/;"	f
CtrlKey	types.h	/^    bool CtrlKey;$/;"	m	struct:modifiers
Current	types.h	/^    screen_info *Current;$/;"	m	struct:kwm_screen
Cycle	types.h	/^    cycle_focus_option Cycle;$/;"	m	struct:kwm_mode
CycleModeAll	types.h	/^    CycleModeAll,$/;"	e	enum:cycle_focus_option
CycleModeDisabled	types.h	/^    CycleModeDisabled$/;"	e	enum:cycle_focus_option
CycleModeScreen	types.h	/^    CycleModeScreen,$/;"	e	enum:cycle_focus_option
DAEMON_H	daemon.h	/^#define DAEMON_H$/;"	d
DEBUG	types.h	/^    #define DEBUG(/;"	d
DISPLAY_H	display.h	/^#define DISPLAY_H$/;"	d
Daemon	types.h	/^    pthread_t Daemon;$/;"	m	struct:kwm_thread
DefaultOffset	types.h	/^    container_offset DefaultOffset;$/;"	m	struct:kwm_screen
DeserializeChildNode	serialize.cpp	/^unsigned int DeserializeChildNode(tree_node *Parent, std::vector<std::string> &Serialized, unsigned int Index)$/;"	f
DeserializeNodeTree	serialize.cpp	/^tree_node *DeserializeNodeTree(std::vector<std::string> &Serialized)$/;"	f
DeserializeParentNode	serialize.cpp	/^unsigned int DeserializeParentNode(tree_node *Parent, std::vector<std::string> &Serialized, unsigned int Index)$/;"	f
DestroyApplicationNotifications	notifications.cpp	/^void DestroyApplicationNotifications()$/;"	f
DestroyNodeTree	tree.cpp	/^void DestroyNodeTree(tree_node *Node, space_tiling_option Mode)$/;"	f
DetachAndReinsertWindow	window.cpp	/^void DetachAndReinsertWindow(int WindowID, int Degrees)$/;"	f
DetermineHotkeyState	keys.cpp	/^void DetermineHotkeyState(hotkey *Hotkey, std::string &Command)$/;"	f
DisplayMap	types.h	/^    std::map<unsigned int, screen_info> DisplayMap;$/;"	m	struct:kwm_tiling
DisplayMode	types.h	/^    std::map<unsigned int, space_tiling_option> DisplayMode;$/;"	m	struct:kwm_tiling
DisplayReconfigurationCallBack	display.cpp	/^void DisplayReconfigurationCallBack(CGDirectDisplayID Display, CGDisplayChangeSummaryFlags Flags, void *UserInfo)$/;"	f
Displays	types.h	/^    CGDirectDisplayID *Displays;$/;"	m	struct:kwm_screen
DoesSpaceExistInMapOfScreen	space.cpp	/^bool DoesSpaceExistInMapOfScreen(screen_info *Screen)$/;"	f
EnableTilingMode	types.h	/^    bool EnableTilingMode;$/;"	m	struct:kwm_toggles
Enabled	types.h	/^    bool Enabled;$/;"	m	struct:kwm_border
Enabled	types.h	/^    bool Enabled;$/;"	m	struct:kwm_prefix
EnvHome	types.h	/^    std::string EnvHome;$/;"	m	struct:kwm_path
EventMask	types.h	/^    CGEventMask EventMask;$/;"	m	struct:kwm_mach
EventTap	types.h	/^    CFMachPortRef EventTap;$/;"	m	struct:kwm_mach
Fatal	kwm.cpp	/^void Fatal(const std::string &Err)$/;"	f
FilePath	types.h	/^    std::string FilePath;$/;"	m	struct:kwm_path
FillDeserializedTree	serialize.cpp	/^void FillDeserializedTree(tree_node *RootNode)$/;"	f
FilterWindowList	window.cpp	/^bool FilterWindowList(screen_info *Screen)$/;"	f
FilterWindowListAllDisplays	window.cpp	/^std::vector<window_info> FilterWindowListAllDisplays()$/;"	f
FindClosestWindow	window.cpp	/^bool FindClosestWindow(int Degrees, window_info *Target, bool Wrap)$/;"	f
FloatFocusedSpace	space.cpp	/^void FloatFocusedSpace()$/;"	f
FloatNonResizable	types.h	/^    bool FloatNonResizable;$/;"	m	struct:kwm_tiling
FloatingAppLst	types.h	/^    std::vector<std::string> FloatingAppLst;$/;"	m	struct:kwm_tiling
FloatingWindowLst	types.h	/^    std::vector<int> FloatingWindowLst;$/;"	m	struct:kwm_tiling
Focus	types.h	/^    focus_option Focus;$/;"	m	struct:kwm_mode
FocusFirstLeafNode	window.cpp	/^void FocusFirstLeafNode()$/;"	f
FocusLastLeafNode	window.cpp	/^void FocusLastLeafNode()$/;"	f
FocusLst	types.h	/^    std::vector<window_info> FocusLst;$/;"	m	struct:kwm_tiling
FocusModeAutofocus	types.h	/^    FocusModeAutofocus,$/;"	e	enum:focus_option
FocusModeAutoraise	types.h	/^    FocusModeAutoraise,$/;"	e	enum:focus_option
FocusModeDisabled	types.h	/^    FocusModeDisabled$/;"	e	enum:focus_option
FocusModeStandby	types.h	/^    FocusModeStandby,$/;"	e	enum:focus_option
FocusWindowBelowCursor	window.cpp	/^void FocusWindowBelowCursor()$/;"	f
FocusWindowByID	window.cpp	/^void FocusWindowByID(int WindowID)$/;"	f
FocusWindowOfOSX	window.cpp	/^bool FocusWindowOfOSX()$/;"	f
FocusedAXObserverCallback	notifications.cpp	/^void FocusedAXObserverCallback(AXObserverRef Observer, AXUIElementRef Element, CFStringRef Notification, void *ContextData)$/;"	f
FocusedBorder	kwm.cpp	/^kwm_border FocusedBorder = {};$/;"	v
FocusedNode	types.h	/^    tree_node *FocusedNode;$/;"	m	struct:space_info
ForceContainerUpdate	types.h	/^    bool ForceContainerUpdate;$/;"	m	struct:screen_info
ForceRefreshFocus	types.h	/^    bool ForceRefreshFocus;$/;"	m	struct:kwm_screen
Format	types.h	/^    std::string Format;$/;"	m	struct:color
FreeWindowRefCache	window.cpp	/^void FreeWindowRefCache(int PID)$/;"	f
GetActiveDisplays	display.cpp	/^void GetActiveDisplays()$/;"	f
GetActiveSpaceOfScreen	space.cpp	/^space_info *GetActiveSpaceOfScreen(screen_info *Screen)$/;"	f
GetAllWindowIDsOnDisplay	display.cpp	/^std::vector<int> GetAllWindowIDsOnDisplay(int ScreenIndex)$/;"	f
GetAllWindowsOnDisplay	display.cpp	/^std::vector<window_info*> GetAllWindowsOnDisplay(int ScreenIndex)$/;"	f
GetCenterOfWindow	window.cpp	/^void GetCenterOfWindow(window_info *Window, int *X, int *Y)$/;"	f
GetCursorPos	window.cpp	/^CGPoint GetCursorPos()$/;"	f
GetDisplayFromScreenID	display.cpp	/^screen_info *GetDisplayFromScreenID(unsigned int ID)$/;"	f
GetDisplayOfMousePointer	display.cpp	/^screen_info *GetDisplayOfMousePointer()$/;"	f
GetDisplayOfWindow	display.cpp	/^screen_info *GetDisplayOfWindow(window_info *Window)$/;"	f
GetFirstLeafNode	tree.cpp	/^tree_node *GetFirstLeafNode(tree_node *Node)$/;"	f
GetFirstPseudoLeafNode	tree.cpp	/^tree_node *GetFirstPseudoLeafNode(tree_node *Node)$/;"	f
GetFocusedWindowID	window.cpp	/^int GetFocusedWindowID()$/;"	f
GetIndexOfNextScreen	display.cpp	/^int GetIndexOfNextScreen()$/;"	f
GetIndexOfPrevScreen	display.cpp	/^int GetIndexOfPrevScreen()$/;"	f
GetKwmFilePath	kwm.cpp	/^bool GetKwmFilePath()$/;"	f
GetLastLeafNode	tree.cpp	/^tree_node *GetLastLeafNode(tree_node *Node)$/;"	f
GetLayoutIndependentKeycode	keys.cpp	/^bool GetLayoutIndependentKeycode(std::string Key, CGKeyCode *Keycode)$/;"	f
GetNearestLeafNeighbour	tree.cpp	/^tree_node *GetNearestLeafNeighbour(tree_node *Node, space_tiling_option Mode)$/;"	f
GetNearestNodeToTheLeft	tree.cpp	/^tree_node *GetNearestNodeToTheLeft(tree_node *Node, space_tiling_option Mode)$/;"	f
GetNearestNodeToTheRight	tree.cpp	/^tree_node *GetNearestNodeToTheRight(tree_node *Node, space_tiling_option Mode)$/;"	f
GetNodeFromWindowID	tree.cpp	/^tree_node *GetNodeFromWindowID(tree_node *Node, int WindowID, space_tiling_option Mode)$/;"	f
GetOptimalSplitMode	container.cpp	/^split_mode GetOptimalSplitMode(const node_container &Container)$/;"	f
GetSpaceModeOfDisplay	display.cpp	/^space_tiling_option GetSpaceModeOfDisplay(unsigned int ScreenIndex)$/;"	f
GetTagForCurrentSpace	space.cpp	/^void GetTagForCurrentSpace(std::string &Tag)$/;"	f
GetTagForMonocleSpace	space.cpp	/^void GetTagForMonocleSpace(space_info *Space, std::string &Tag)$/;"	f
GetUTF8String	window.cpp	/^std::string GetUTF8String(CFStringRef Temp)$/;"	f
GetWindowByID	window.cpp	/^window_info *GetWindowByID(int WindowID)$/;"	f
GetWindowDistance	window.cpp	/^double GetWindowDistance(window_info *A, window_info *B)$/;"	f
GetWindowFocusedByOSX	window.cpp	/^bool GetWindowFocusedByOSX(int *WindowWID)$/;"	f
GetWindowInfo	window.cpp	/^void GetWindowInfo(const void *Key, const void *Value, void *Context)$/;"	f
GetWindowPos	window.cpp	/^CGPoint GetWindowPos(AXUIElementRef WindowRef)$/;"	f
GetWindowRef	window.cpp	/^bool GetWindowRef(window_info *Window, AXUIElementRef *WindowRef)$/;"	f
GetWindowRefFromCache	window.cpp	/^bool GetWindowRefFromCache(window_info *Window, AXUIElementRef *WindowRef)$/;"	f
GetWindowRole	window.cpp	/^bool GetWindowRole(window_info *Window, CFTypeRef *Role, CFTypeRef *SubRole)$/;"	f
GetWindowSize	window.cpp	/^CGSize GetWindowSize(AXUIElementRef WindowRef)$/;"	f
GetWindowTitle	window.cpp	/^std::string GetWindowTitle(AXUIElementRef WindowRef)$/;"	f
GiveFocusToScreen	display.cpp	/^void GiveFocusToScreen(int ScreenIndex, tree_node *FocusNode, bool Mouse)$/;"	f
Global	types.h	/^    bool Global;$/;"	m	struct:kwm_prefix
Green	types.h	/^    double Green;$/;"	m	struct:color
HELPERS_H	helpers.h	/^#define HELPERS_H$/;"	d
Handle	types.h	/^    FILE *Handle;$/;"	m	struct:kwm_border
Height	types.h	/^    double Width, Height;$/;"	m	struct:node_container
Height	types.h	/^    double Width, Height;$/;"	m	struct:screen_info
Height	types.h	/^    int Width, Height;$/;"	m	struct:window_info
HorizontalGap	types.h	/^    double VerticalGap, HorizontalGap;$/;"	m	struct:container_offset
HotkeyExists	keys.cpp	/^bool HotkeyExists(modifiers Mod, CGKeyCode Keycode, hotkey *Hotkey)$/;"	f
HotkeyStateExclude	types.h	/^    HotkeyStateExclude$/;"	e	enum:hotkey_state
HotkeyStateInclude	types.h	/^    HotkeyStateInclude,$/;"	e	enum:hotkey_state
HotkeyStateNone	types.h	/^    HotkeyStateNone,$/;"	e	enum:hotkey_state
HotkeysAreEqual	keys.cpp	/^bool HotkeysAreEqual(hotkey *A, hotkey *B)$/;"	f
ID	types.h	/^    unsigned int ID;$/;"	m	struct:screen_info
INTERPRETER_H	interpreter.h	/^#define INTERPRETER_H$/;"	d
Identifier	types.h	/^    CFStringRef Identifier;$/;"	m	struct:screen_info
Initialized	types.h	/^    bool Initialized;$/;"	m	struct:space_info
IsActiveSpaceFloating	space.cpp	/^bool IsActiveSpaceFloating()$/;"	f
IsActiveSpaceManaged	space.cpp	/^bool IsActiveSpaceManaged()$/;"	f
IsAnyWindowBelowCursor	window.cpp	/^bool IsAnyWindowBelowCursor()$/;"	f
IsAppSpecificWindowRole	window.cpp	/^bool IsAppSpecificWindowRole(window_info *Window, CFTypeRef Role, CFTypeRef SubRole)$/;"	f
IsApplicationCapturedByScreen	window.cpp	/^bool IsApplicationCapturedByScreen(window_info *Window)$/;"	f
IsApplicationFloating	window.cpp	/^bool IsApplicationFloating(window_info *Window)$/;"	f
IsApplicationInCache	window.cpp	/^bool IsApplicationInCache(int PID, std::vector<AXUIElementRef> *Elements)$/;"	f
IsFocusedWindowFloating	window.cpp	/^bool IsFocusedWindowFloating()$/;"	f
IsHotkeyStateReqFulfilled	keys.cpp	/^bool IsHotkeyStateReqFulfilled(hotkey *Hotkey)$/;"	f
IsLeafNode	node.cpp	/^bool IsLeafNode(tree_node *Node)$/;"	f
IsLeftChild	node.cpp	/^bool IsLeftChild(tree_node *Node)$/;"	f
IsLeftLeaf	node.cpp	/^bool IsLeftLeaf(tree_node *Node)$/;"	f
IsPrefixOfString	helpers.cpp	/^bool IsPrefixOfString(std::string &Line, std::string Prefix)$/;"	f
IsRightChild	node.cpp	/^bool IsRightChild(tree_node *Node)$/;"	f
IsRightLeaf	node.cpp	/^bool IsRightLeaf(tree_node *Node)$/;"	f
IsSpaceFloating	space.cpp	/^bool IsSpaceFloating(int SpaceID)$/;"	f
IsSpaceInitializedForScreen	space.cpp	/^bool IsSpaceInitializedForScreen(screen_info *Screen)$/;"	f
IsSpaceTransitionInProgress	space.cpp	/^bool IsSpaceTransitionInProgress()$/;"	f
IsSystemCommand	types.h	/^    bool IsSystemCommand;$/;"	m	struct:hotkey
IsWindowBelowCursor	window.cpp	/^bool IsWindowBelowCursor(window_info *Window)$/;"	f
IsWindowFloating	window.cpp	/^bool IsWindowFloating(int WindowID, int *Index)$/;"	f
IsWindowNonResizable	window.cpp	/^bool IsWindowNonResizable(AXUIElementRef WindowRef, window_info *Window, CFTypeRef NewWindowPos, CFTypeRef NewWindowSize)$/;"	f
IsWindowOnActiveSpace	window.cpp	/^bool IsWindowOnActiveSpace(int WindowID)$/;"	f
KEYS_H	keys.h	/^#define KEYS_H$/;"	d
KWMCache	kwm.cpp	/^kwm_cache KWMCache = {};$/;"	v
KWMCallback	kwm.cpp	/^kwm_callback KWMCallback =  {};$/;"	v
KWMFocus	kwm.cpp	/^kwm_focus KWMFocus = {};$/;"	v
KWMHotkeys	kwm.cpp	/^kwm_hotkeys KWMHotkeys = {};$/;"	v
KWMMach	kwm.cpp	/^kwm_mach KWMMach = {};$/;"	v
KWMMode	kwm.cpp	/^kwm_mode KWMMode = {};$/;"	v
KWMPath	kwm.cpp	/^kwm_path KWMPath = {};$/;"	v
KWMScreen	kwm.cpp	/^kwm_screen KWMScreen = {};$/;"	v
KWMThread	kwm.cpp	/^kwm_thread KWMThread = {};$/;"	v
KWMTiling	kwm.cpp	/^kwm_tiling KWMTiling = {};$/;"	v
KWMToggles	kwm.cpp	/^kwm_toggles KWMToggles = {};$/;"	v
KWM_H	kwm.h	/^#define KWM_H$/;"	d
Key	types.h	/^    CGKeyCode Key;$/;"	m	struct:hotkey
Key	types.h	/^    hotkey Key;$/;"	m	struct:kwm_prefix
KeycodeForChar	keys.cpp	/^bool KeycodeForChar(char Key, CGKeyCode *Keycode)$/;"	f
KeycodeToString	keys.cpp	/^CFStringRef KeycodeToString(CGKeyCode Keycode)$/;"	f
KwmAddHotkey	keys.cpp	/^void KwmAddHotkey(std::string KeySym, std::string Command)$/;"	f
KwmBindCommand	interpreter.cpp	/^void KwmBindCommand(std::vector<std::string> &Tokens)$/;"	f
KwmClearSettings	kwm.cpp	/^void KwmClearSettings()$/;"	f
KwmConfigCommand	interpreter.cpp	/^void KwmConfigCommand(std::vector<std::string> &Tokens)$/;"	f
KwmCurrentVersion	kwm.cpp	/^const std::string KwmCurrentVersion = "Kwm Version 1.1.2";$/;"	v
KwmDaemonHandleConnection	daemon.cpp	/^void KwmDaemonHandleConnection()$/;"	f
KwmDaemonHandleConnectionBG	daemon.cpp	/^void * KwmDaemonHandleConnectionBG(void *)$/;"	f
KwmDaemonIsRunning	daemon.cpp	/^bool KwmDaemonIsRunning;$/;"	v
KwmDaemonPort	daemon.cpp	/^int KwmDaemonPort = 3020;$/;"	v
KwmEmitKeystroke	keys.cpp	/^void KwmEmitKeystroke(modifiers Mod, std::string Key)$/;"	f
KwmEmitKeystroke	keys.cpp	/^void KwmEmitKeystroke(std::string KeySym)$/;"	f
KwmEmitKeystrokes	keys.cpp	/^void KwmEmitKeystrokes(std::string Text)$/;"	f
KwmExecuteConfig	kwm.cpp	/^void KwmExecuteConfig()$/;"	f
KwmExecuteFile	kwm.cpp	/^void KwmExecuteFile(std::string File)$/;"	f
KwmExecuteHotkey	keys.cpp	/^bool KwmExecuteHotkey(modifiers Mod, CGKeyCode Keycode)$/;"	f
KwmExecuteInitScript	kwm.cpp	/^void KwmExecuteInitScript()$/;"	f
KwmExecuteSystemCommand	kwm.cpp	/^void KwmExecuteSystemCommand(std::string Command)$/;"	f
KwmExecuteThreadedSystemCommand	kwm.cpp	/^void KwmExecuteThreadedSystemCommand(std::string Command)$/;"	f
KwmInit	kwm.cpp	/^void KwmInit()$/;"	f
KwmInterpretCommand	interpreter.cpp	/^void KwmInterpretCommand(std::string Message, int ClientSockFD)$/;"	f
KwmIsPrefixKey	keys.cpp	/^bool KwmIsPrefixKey(hotkey *PrefixKey, modifiers *Mod, CGKeyCode Keycode)$/;"	f
KwmMainHotkeyTrigger	keys.cpp	/^bool KwmMainHotkeyTrigger(CGEventRef *Event)$/;"	f
KwmMarkCommand	interpreter.cpp	/^void KwmMarkCommand(std::vector<std::string> &Tokens)$/;"	f
KwmParseHotkey	keys.cpp	/^bool KwmParseHotkey(std::string KeySym, std::string Command, hotkey *Hotkey)$/;"	f
KwmQuit	kwm.cpp	/^void KwmQuit()$/;"	f
KwmReadCommand	interpreter.cpp	/^void KwmReadCommand(std::vector<std::string> &Tokens, int ClientSockFD)$/;"	f
KwmReadFromSocket	daemon.cpp	/^std::string KwmReadFromSocket(int ClientSockFD)$/;"	f
KwmReloadConfig	kwm.cpp	/^void KwmReloadConfig()$/;"	f
KwmRemoveHotkey	keys.cpp	/^void KwmRemoveHotkey(std::string KeySym)$/;"	f
KwmScreenCommand	interpreter.cpp	/^void KwmScreenCommand(std::vector<std::string> &Tokens)$/;"	f
KwmSetPrefix	keys.cpp	/^void KwmSetPrefix(std::string KeySym)$/;"	f
KwmSetPrefixGlobal	keys.cpp	/^void KwmSetPrefixGlobal(bool Global)$/;"	f
KwmSetPrefixTimeout	keys.cpp	/^void KwmSetPrefixTimeout(double Timeout)$/;"	f
KwmSetSpacesKey	keys.cpp	/^void KwmSetSpacesKey(std::string KeySym)$/;"	f
KwmSockFD	daemon.cpp	/^int KwmSockFD;$/;"	v
KwmSpaceCommand	interpreter.cpp	/^void KwmSpaceCommand(std::vector<std::string> &Tokens)$/;"	f
KwmStartDaemon	daemon.cpp	/^bool KwmStartDaemon()$/;"	f
KwmStartThreadedSystemCommand	kwm.cpp	/^void * KwmStartThreadedSystemCommand(void *Args)$/;"	f
KwmTerminateDaemon	daemon.cpp	/^void KwmTerminateDaemon()$/;"	f
KwmTreeCommand	interpreter.cpp	/^void KwmTreeCommand(std::vector<std::string> &Tokens)$/;"	f
KwmWindowCommand	interpreter.cpp	/^void KwmWindowCommand(std::vector<std::string> &Tokens)$/;"	f
KwmWindowMonitor	kwm.cpp	/^void * KwmWindowMonitor(void*)$/;"	f
KwmWriteToSocket	daemon.cpp	/^void KwmWriteToSocket(int ClientSockFD, std::string Msg)$/;"	f
Layer	types.h	/^    int Layer;$/;"	m	struct:window_info
LeftChild	types.h	/^    tree_node *LeftChild;$/;"	m	struct:tree_node
LeftVerticalContainerSplit	container.cpp	/^node_container LeftVerticalContainerSplit(screen_info *Screen, const node_container &Container)$/;"	f
List	types.h	/^    std::vector<hotkey> List;$/;"	m	struct:kwm_hotkeys
List	types.h	/^    std::vector<std::string> List;$/;"	m	struct:hotkey
LoadBSPTreeFromFile	serialize.cpp	/^void LoadBSPTreeFromFile(screen_info *Screen, std::string Name)$/;"	f
Lock	types.h	/^    pthread_mutex_t Lock;$/;"	m	struct:kwm_thread
LowerHorizontalContainerSplit	container.cpp	/^node_container LowerHorizontalContainerSplit(screen_info *Screen, const node_container &Container)$/;"	f
Managed	types.h	/^    bool Managed;$/;"	m	struct:space_info
MarkFocusedWindowContainer	window.cpp	/^void MarkFocusedWindowContainer()$/;"	f
MarkWindowContainer	window.cpp	/^void MarkWindowContainer(window_info *Window)$/;"	f
MarkedBorder	kwm.cpp	/^kwm_border MarkedBorder = {};$/;"	v
MarkedWindow	types.h	/^    int MarkedWindow;$/;"	m	struct:kwm_screen
MaxCount	types.h	/^    unsigned int MaxCount;$/;"	m	struct:kwm_screen
Mod	types.h	/^    modifiers Mod;$/;"	m	struct:hotkey
Mode	types.h	/^    space_tiling_option Mode;$/;"	m	struct:space_info
ModifyContainerSplitRatio	window.cpp	/^void ModifyContainerSplitRatio(double Offset)$/;"	f
MoveCursorToCenterOfFocusedWindow	window.cpp	/^void MoveCursorToCenterOfFocusedWindow()$/;"	f
MoveCursorToCenterOfWindow	window.cpp	/^void MoveCursorToCenterOfWindow(window_info *Window)$/;"	f
MoveFloatingWindow	window.cpp	/^void MoveFloatingWindow(int X, int Y)$/;"	f
MoveWindowToDisplay	display.cpp	/^void MoveWindowToDisplay(window_info *Window, int Shift, bool Relative)$/;"	f
NODE_H	node.h	/^#define NODE_H$/;"	d
NOTIFICATIONS_H	notifications.h	/^#define NOTIFICATIONS_H$/;"	d
NULLWindowInfo	types.h	/^    window_info NULLWindowInfo;$/;"	m	struct:kwm_focus
Name	types.h	/^    std::string Name;$/;"	m	struct:window_info
Observer	types.h	/^    AXObserverRef Observer;$/;"	m	struct:kwm_focus
Offset	types.h	/^    container_offset Offset;$/;"	m	struct:screen_info
Offset	types.h	/^    container_offset Offset;$/;"	m	struct:space_info
OldWindowListCount	types.h	/^    int OldWindowListCount;$/;"	m	struct:screen_info
OnBSPWindowCreate	types.h	/^typedef BSP_WINDOW_EVENT_CALLBACK(OnBSPWindowCreate);$/;"	t
OnBSPWindowDestroy	types.h	/^typedef BSP_WINDOW_EVENT_CALLBACK(OnBSPWindowDestroy);$/;"	t
OpenBorder	border.cpp	/^void OpenBorder(kwm_border *Border)$/;"	f
Owner	types.h	/^    std::string Owner;$/;"	m	struct:window_info
PID	types.h	/^    int PID, WID;$/;"	m	struct:window_info
PSN	types.h	/^    ProcessSerialNumber PSN;$/;"	m	struct:kwm_focus
PaddingBottom	types.h	/^    double PaddingTop, PaddingBottom;$/;"	m	struct:container_offset
PaddingLeft	types.h	/^    double PaddingLeft, PaddingRight;$/;"	m	struct:container_offset
PaddingRight	types.h	/^    double PaddingLeft, PaddingRight;$/;"	m	struct:container_offset
PaddingTop	types.h	/^    double PaddingTop, PaddingBottom;$/;"	m	struct:container_offset
Parent	types.h	/^    tree_node *Parent;$/;"	m	struct:tree_node
Prefix	types.h	/^    kwm_prefix Prefix;$/;"	m	struct:kwm_hotkeys
PrefixBorder	kwm.cpp	/^kwm_border PrefixBorder = {};$/;"	v
Prefixed	types.h	/^    bool Prefixed;$/;"	m	struct:hotkey
PrevSpace	types.h	/^    int PrevSpace;$/;"	m	struct:kwm_screen
Radius	types.h	/^    double Radius;$/;"	m	struct:kwm_border
Red	types.h	/^    double Red;$/;"	m	struct:color
RefreshActiveDisplays	display.cpp	/^void RefreshActiveDisplays()$/;"	f
RefreshBorder	border.cpp	/^void RefreshBorder(kwm_border *Border, int WindowID)$/;"	f
RemoveWindowFromBSPTree	window.cpp	/^void RemoveWindowFromBSPTree()$/;"	f
RemoveWindowFromBSPTree	window.cpp	/^void RemoveWindowFromBSPTree(screen_info *Screen, int WindowID, bool Center, bool Refresh)$/;"	f
RemoveWindowFromMonocleTree	window.cpp	/^void RemoveWindowFromMonocleTree(screen_info *Screen, int WindowID, bool Center)$/;"	f
ResizeNodeContainer	tree.cpp	/^void ResizeNodeContainer(screen_info *Screen, tree_node *Node)$/;"	f
ResizeWindowToContainerSize	window.cpp	/^void ResizeWindowToContainerSize()$/;"	f
ResizeWindowToContainerSize	window.cpp	/^void ResizeWindowToContainerSize(tree_node *Node)$/;"	f
ResizeWindowToContainerSize	window.cpp	/^void ResizeWindowToContainerSize(window_info *Window)$/;"	f
RightChild	types.h	/^    tree_node *RightChild;$/;"	m	struct:tree_node
RightVerticalContainerSplit	container.cpp	/^node_container RightVerticalContainerSplit(screen_info *Screen, const node_container &Container)$/;"	f
Role	types.h	/^    CFTypeRef Role;$/;"	m	struct:window_role
RootNode	types.h	/^    tree_node *RootNode;$/;"	m	struct:space_info
RotateTree	tree.cpp	/^void RotateTree(tree_node *Node, int Deg)$/;"	f
RunLoopSource	types.h	/^    CFRunLoopSourceRef RunLoopSource;$/;"	m	struct:kwm_mach
SERIALIZE_H	serialize.h	/^#define SERIALIZE_H$/;"	d
SPACE_H	space.h	/^#define SPACE_H$/;"	d
SaveBSPTreeToFile	serialize.cpp	/^void SaveBSPTreeToFile(screen_info *Screen, std::string Name)$/;"	f
SerializeParentNode	serialize.cpp	/^void SerializeParentNode(tree_node *Parent, std::string Role, std::vector<std::string> &Serialized)$/;"	f
SetDefaultGapOfDisplay	display.cpp	/^void SetDefaultGapOfDisplay(const std::string &Side, int Offset)$/;"	f
SetDefaultPaddingOfDisplay	display.cpp	/^void SetDefaultPaddingOfDisplay(const std::string &Side, int Offset)$/;"	f
SetRootNodeContainer	container.cpp	/^void SetRootNodeContainer(screen_info *Screen, node_container* Container)$/;"	f
SetSpaceModeOfDisplay	display.cpp	/^void SetSpaceModeOfDisplay(unsigned int ScreenIndex, std::string Mode)$/;"	f
SetWindowDimensions	window.cpp	/^void SetWindowDimensions(AXUIElementRef WindowRef, window_info *Window, int X, int Y, int Width, int Height)$/;"	f
SetWindowFocus	window.cpp	/^void SetWindowFocus(window_info *Window)$/;"	f
SetWindowFocusByNode	window.cpp	/^void SetWindowFocusByNode(tree_node *Node)$/;"	f
SetWindowRefFocus	window.cpp	/^void SetWindowRefFocus(AXUIElementRef WindowRef, window_info *Window, bool Notification)$/;"	f
ShiftKey	types.h	/^    bool ShiftKey;$/;"	m	struct:modifiers
ShiftWindowFocus	window.cpp	/^void ShiftWindowFocus(int Shift)$/;"	f
ShiftWindowFocusDirected	window.cpp	/^void ShiftWindowFocusDirected(int Degrees)$/;"	f
ShouldActiveSpaceBeManaged	space.cpp	/^void ShouldActiveSpaceBeManaged()$/;"	f
ShouldBSPTreeUpdate	window.cpp	/^void ShouldBSPTreeUpdate(screen_info *Screen, space_info *Space)$/;"	f
ShouldMonocleTreeUpdate	window.cpp	/^void ShouldMonocleTreeUpdate(screen_info *Screen, space_info *Space)$/;"	f
ShouldWindowGainFocus	window.cpp	/^bool ShouldWindowGainFocus(window_info *Window)$/;"	f
ShouldWindowNodeTreeUpdate	window.cpp	/^void ShouldWindowNodeTreeUpdate(screen_info *Screen)$/;"	f
SignalHandler	kwm.cpp	/^void SignalHandler(int Signum)$/;"	f
Space	types.h	/^    space_tiling_option Space;$/;"	m	struct:kwm_mode
Space	types.h	/^    std::map<int, space_info> Space;$/;"	m	struct:screen_info
SpaceModeBSP	types.h	/^    SpaceModeBSP,$/;"	e	enum:space_tiling_option
SpaceModeDefault	types.h	/^    SpaceModeDefault$/;"	e	enum:space_tiling_option
SpaceModeFloating	types.h	/^    SpaceModeFloating,$/;"	e	enum:space_tiling_option
SpaceModeMonocle	types.h	/^    SpaceModeMonocle,$/;"	e	enum:space_tiling_option
SpacesKey	types.h	/^    modifiers SpacesKey;$/;"	m	struct:kwm_hotkeys
SpawnAsLeftChild	types.h	/^    bool SpawnAsLeftChild;$/;"	m	struct:kwm_tiling
SplitMode	types.h	/^    split_mode SplitMode;$/;"	m	struct:kwm_screen
SplitMode	types.h	/^    split_mode SplitMode;$/;"	m	struct:node_container
SplitModeHorizontal	types.h	/^    SplitModeHorizontal,$/;"	e	enum:split_mode
SplitModeOptimal	types.h	/^    SplitModeOptimal=-1,$/;"	e	enum:split_mode
SplitModeUnset	types.h	/^    SplitModeUnset,$/;"	e	enum:split_mode
SplitModeVertical	types.h	/^    SplitModeVertical,$/;"	e	enum:split_mode
SplitRatio	types.h	/^    double SplitRatio;$/;"	m	struct:kwm_screen
SplitRatio	types.h	/^    double SplitRatio;$/;"	m	struct:node_container
SplitString	helpers.cpp	/^std::vector<std::string> SplitString(std::string Line, char Delim)$/;"	f
StandbyOnFloat	types.h	/^    bool StandbyOnFloat;$/;"	m	struct:kwm_toggles
State	types.h	/^    hotkey_state State;$/;"	m	struct:hotkey
SubRole	types.h	/^    CFTypeRef SubRole;$/;"	m	struct:window_role
SwapFocusedWindowDirected	window.cpp	/^void SwapFocusedWindowDirected(int Degrees)$/;"	f
SwapFocusedWindowWithMarked	window.cpp	/^void SwapFocusedWindowWithMarked()$/;"	f
SwapFocusedWindowWithNearest	window.cpp	/^void SwapFocusedWindowWithNearest(int Shift)$/;"	f
SwapNodeWindowIDs	node.cpp	/^void SwapNodeWindowIDs(tree_node *A, tree_node *B)$/;"	f
SystemCommand	types.h	/^    pthread_t SystemCommand;$/;"	m	struct:kwm_thread
TREE_H	tree.h	/^#define TREE_H$/;"	d
TYPES_H	types.h	/^#define TYPES_H$/;"	d
TileFocusedSpace	space.cpp	/^void TileFocusedSpace(space_tiling_option Mode)$/;"	f
Time	types.h	/^    kwm_time_point Time;$/;"	m	struct:kwm_prefix
Timeout	types.h	/^    double Timeout;$/;"	m	struct:kwm_prefix
ToggleFocusedSpaceFloating	space.cpp	/^void ToggleFocusedSpaceFloating()$/;"	f
ToggleFocusedWindowFloating	window.cpp	/^void ToggleFocusedWindowFloating()$/;"	f
ToggleFocusedWindowFullscreen	window.cpp	/^void ToggleFocusedWindowFullscreen()$/;"	f
ToggleFocusedWindowParentContainer	window.cpp	/^void ToggleFocusedWindowParentContainer()$/;"	f
ToggleNodeSplitMode	tree.cpp	/^void ToggleNodeSplitMode(screen_info *Screen, tree_node *Node)$/;"	f
ToggleWindowFloating	window.cpp	/^void ToggleWindowFloating(int WindowID, bool Center)$/;"	f
Transitioning	types.h	/^    bool Transitioning;$/;"	m	struct:kwm_screen
Type	types.h	/^    container_type Type;$/;"	m	struct:node_container
UpdateActiveScreen	display.cpp	/^void UpdateActiveScreen()$/;"	f
UpdateActiveSpace	space.cpp	/^void UpdateActiveSpace()$/;"	f
UpdateActiveWindowList	window.cpp	/^void UpdateActiveWindowList(screen_info *Screen)$/;"	f
UpdateBorder	border.cpp	/^void UpdateBorder(std::string BorderType)$/;"	f
UpdateExistingScreenInfo	display.cpp	/^void UpdateExistingScreenInfo(screen_info *Screen, int DisplayIndex, int ScreenIndex)$/;"	f
UpdateWindowTree	window.cpp	/^void UpdateWindowTree()$/;"	f
UpperHorizontalContainerSplit	container.cpp	/^node_container UpperHorizontalContainerSplit(screen_info *Screen, const node_container &Container)$/;"	f
UseBuiltinHotkeys	types.h	/^    bool UseBuiltinHotkeys;$/;"	m	struct:kwm_toggles
UseMouseFollowsFocus	types.h	/^    bool UseMouseFollowsFocus;$/;"	m	struct:kwm_toggles
VerticalGap	types.h	/^    double VerticalGap, HorizontalGap;$/;"	m	struct:container_offset
WID	types.h	/^    int PID, WID;$/;"	m	struct:window_info
WINDOW_H	window.h	/^#define WINDOW_H$/;"	d
Width	types.h	/^    double Width, Height;$/;"	m	struct:node_container
Width	types.h	/^    double Width, Height;$/;"	m	struct:screen_info
Width	types.h	/^    int Width, Height;$/;"	m	struct:window_info
Width	types.h	/^    int Width;$/;"	m	struct:kwm_border
Window	types.h	/^    window_info *Window;$/;"	m	struct:kwm_focus
WindowCreate	types.h	/^    OnBSPWindowCreate *WindowCreate;$/;"	m	struct:kwm_callback
WindowDestroy	types.h	/^    OnBSPWindowDestroy *WindowDestroy;$/;"	m	struct:kwm_callback
WindowID	types.h	/^    int WindowID;$/;"	m	struct:tree_node
WindowIsInDirection	window.cpp	/^bool WindowIsInDirection(window_info *A, window_info *B, int Degrees, bool Wrap)$/;"	f
WindowLst	types.h	/^    std::vector<window_info> WindowLst;$/;"	m	struct:kwm_tiling
WindowMonitor	types.h	/^    pthread_t WindowMonitor;$/;"	m	struct:kwm_thread
WindowRefs	types.h	/^    std::map<int, std::vector<AXUIElementRef> > WindowRefs;$/;"	m	struct:kwm_cache
WindowRole	types.h	/^    std::map<int, window_role> WindowRole;$/;"	m	struct:kwm_cache
WindowsAreEqual	window.cpp	/^bool WindowsAreEqual(window_info *Window, window_info *Match)$/;"	f
WorkspaceWatcher	types.h	/^    void *WorkspaceWatcher;$/;"	m	struct:kwm_mach
X	types.h	/^    double X, Y;$/;"	m	struct:node_container
X	types.h	/^    int X, Y;$/;"	m	struct:screen_info
X	types.h	/^    int X, Y;$/;"	m	struct:window_info
Y	types.h	/^    double X, Y;$/;"	m	struct:node_container
Y	types.h	/^    int X, Y;$/;"	m	struct:screen_info
Y	types.h	/^    int X, Y;$/;"	m	struct:window_info
color	types.h	/^struct color$/;"	s
container_offset	types.h	/^struct container_offset$/;"	s
container_type	types.h	/^enum container_type$/;"	g
cycle_focus_option	types.h	/^enum cycle_focus_option$/;"	g
focus_option	types.h	/^enum focus_option$/;"	g
hotkey	types.h	/^struct hotkey$/;"	s
hotkey_state	types.h	/^enum hotkey_state$/;"	g
kwm_border	types.h	/^struct kwm_border$/;"	s
kwm_cache	types.h	/^struct kwm_cache$/;"	s
kwm_callback	types.h	/^struct kwm_callback$/;"	s
kwm_focus	types.h	/^struct kwm_focus$/;"	s
kwm_hotkeys	types.h	/^struct kwm_hotkeys$/;"	s
kwm_mach	types.h	/^struct kwm_mach$/;"	s
kwm_mode	types.h	/^struct kwm_mode$/;"	s
kwm_path	types.h	/^struct kwm_path$/;"	s
kwm_prefix	types.h	/^struct kwm_prefix$/;"	s
kwm_screen	types.h	/^struct kwm_screen$/;"	s
kwm_thread	types.h	/^struct kwm_thread$/;"	s
kwm_tiling	types.h	/^struct kwm_tiling$/;"	s
kwm_time_point	types.h	/^typedef std::chrono::time_point<std::chrono::steady_clock> kwm_time_point;$/;"	t
kwm_toggles	types.h	/^struct kwm_toggles$/;"	s
main	kwm.cpp	/^int main(int argc, char **argv)$/;"	f
modifiers	types.h	/^struct modifiers$/;"	s
node_container	types.h	/^struct node_container$/;"	s
screen_info	types.h	/^struct screen_info$/;"	s
space_info	types.h	/^struct space_info$/;"	s
space_tiling_option	types.h	/^enum space_tiling_option$/;"	g
split_mode	types.h	/^enum split_mode$/;"	g
tree_node	types.h	/^struct tree_node$/;"	s
window_info	types.h	/^struct window_info$/;"	s
window_role	types.h	/^struct window_role$/;"	s
