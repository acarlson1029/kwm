/* vvvvv window (high-level)  vvvvv */

/* ========================================================================== */

/* AXUIElementRef */

/* ========================================================================== */

/* window_info */

/* communicates with KWMTiling list */
window_info *GetWindowByID(int WindowID);
/* communicates with KWMCache window role list */
bool GetWindowRole(window_info *Window, CFTypeRef *Role, CFTypeRef *SubRole);
/* communicates with KWMTiling.FocusLst */
std::vector<window_info> FilterWindowListAllDisplays();
/* communicates with KWMTiling.WindowLst */
bool FindClosestWindow(int Degrees, window_info *Target, bool Wrap);

/* focus */
/* Communicates with KWMScreen.Mark */
void ClearMarkedWindow();
/* Communicates with KWMScreen.Mark */
void MarkWindowContainer(window_info *Window);
/* Uses KWMFocus.Window with MarkWindowContainer */
void MarkFocusedWindowContainer();
/* Communicates with KWMTiling.FloatingWindowLst */
bool IsWindowFloating(int WindowID, int *Index);
/* Communicates with KWMFocus and KWMTiling.FloatingWindowLst */
bool IsFocusedWindowFloating();
/* Communicates with KWMFocus */
void ClearFocusedWindow();
/* Communicates with KWMFocus */
int GetFocusedWindowID();
/* Communicates with KWMTiling.WindowLst */
bool FocusWindowOfOSX();
/* Communicates with KWMTiling.FocusLst */
void FocusWindowBelowCursor();

/* Communicates with KWMTiling.FocusLst */
bool IsAnyWindowBelowCursor(); // TODO use the IsWindowBelowCursor function
/* Communicates with KWMTiling.WindowLst */
bool IsWindowOnActiveSpace(int WindowID);
/* Communicates with KWMTiling.WindowLst */
bool FilterWindowList(screen_info *Screen);
/* Communicates with KWMTiling.WindowLst / FocusLst */
void UpdateActiveWindowList(screen_info *Screen);

/* Communicates with KWMTiling.WindowLst */
void GetWindowInfo(const void *Key, const void *Value, void *Context);
/* Communicates with KWMCache.WindowRefs */
void FreeWindowRefCache(int PID);

/* pure window */
bool IsWindowBelowCursor(window_info *Window); // TODO take cursor arg?
bool ShouldWindowGainFocus(window_info *Window);

/* misc */
CGPoint GetCursorPos();

/* window (window-level) */
bool WindowsAreEqual(window_info *Window, window_info *Match);
double GetWindowDistance(window_info *A, window_info *B);
void GetCenterOfWindow(window_info *Window, int *X, int *Y);
bool WindowIsInDirection(window_info *A, window_info *B, int Degrees, bool Wrap);

