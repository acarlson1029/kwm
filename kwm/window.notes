/* vvvvv window (high-level)  vvvvv */

/* ========================================================================== */

/* AXUIElementRef */

/* ========================================================================== */

/* window_info */

/* communicates with KWMTiling list */
window_info *GetWindowByID(int WindowID);
/* communicates with KWMCache window role list */
bool GetWindowRole(window_info *Window, CFTypeRef *Role, CFTypeRef *SubRole);
/* communicates with KWMTiling.FocusLst */
std::vector<window_info> FilterWindowListAllDisplays();
/* communicates with KWMTiling.WindowLst */
bool FindClosestWindow(int Degrees, window_info *Target, bool Wrap);

/* focus */
/* Communicates with KWMScreen.Mark */
void ClearMarkedWindow();
/* Communicates with KWMScreen.Mark */
void MarkWindowContainer(window_info *Window);
/* Uses KWMFocus.Window with MarkWindowContainer */
void MarkFocusedWindowContainer();
/* Communicates with KWMTiling.FloatingWindowLst */
bool IsWindowFloating(int WindowID, int *Index);
/* Communicates with KWMFocus and KWMTiling.FloatingWindowLst */
bool IsFocusedWindowFloating();
/* Communicates with KWMFocus */
void ClearFocusedWindow();
/* Communicates with KWMFocus */
int GetFocusedWindowID();
/* Communicates with KWMTiling.WindowLst */
bool FocusWindowOfOSX();
/* Communicates with KWMTiling.FocusLst */
void FocusWindowBelowCursor();

/* Communicates with KWMTiling.FocusLst */
bool IsAnyWindowBelowCursor(); // TODO use the IsWindowBelowCursor function
/* Communicates with KWMTiling.WindowLst */
bool IsWindowOnActiveSpace(int WindowID);
/* Communicates with KWMTiling.WindowLst */
bool FilterWindowList(screen_info *Screen);
/* Communicates with KWMTiling.WindowLst / FocusLst */
void UpdateActiveWindowList(screen_info *Screen);

/* Communicates with KWMTiling.WindowLst */
void GetWindowInfo(const void *Key, const void *Value, void *Context);
/* Communicates with KWMCache.WindowRefs */
void FreeWindowRefCache(int PID);

/* pure window */
bool IsWindowBelowCursor(window_info *Window); // TODO take cursor arg?
bool ShouldWindowGainFocus(window_info *Window);

/* misc */
CGPoint GetCursorPos();

/* window (window-level) */
bool WindowsAreEqual(window_info *Window, window_info *Match);
double GetWindowDistance(window_info *A, window_info *B);
void GetCenterOfWindow(window_info *Window, int *X, int *Y);
bool WindowIsInDirection(window_info *A, window_info *B, int Degrees, bool Wrap);

/* Operating on WINDOWS through TREES */
/* tree */
/* Focus */
void SetWindowFocusByNode(tree_node *Node); // whereshould this go? it just calls SetWindowFocus(Window)
void FocusFirstLeafNode();
void FocusLastLeafNode();
void FocusWindowByID(int WindowID);
void ShiftWindowFocus(int Shift);
void ShiftWindowFocusDirected(int Degrees);

/* Determine whether to create the tree, update the tree, or destroy the tree */
void UpdateWindowTree();
void CreateWindowNodeTree(screen_info *Screen, std::vector<window_info*> *Windows);
void ShouldWindowNodeTreeUpdate(screen_info *Screen);
void ShouldBSPTreeUpdate(screen_info *Screen, space_info *Space);
void ShouldMonocleTreeUpdate(screen_info *Screen, space_info *Space);

/* Add/Remove windows */
void AddWindowToBSPTree(screen_info *Screen, int WindowID);
void AddWindowToBSPTree();
void AddWindowToMonocleTree(screen_info *Screen, int WindowID);
void AddWindowToTreeOfUnfocusedMonitor(screen_info *Screen, window_info *Window);
void RemoveWindowFromBSPTree(screen_info *Screen, int WindowID, bool Refresh);
void RemoveWindowFromBSPTree();
void RemoveWindowFromMonocleTree(screen_info *Screen, int WindowID);

/* Add/Remove Window from Tree to let it float */
void ToggleWindowFloating(int WindowID);
/* uses KWMFocus window as arg to ToggleWindowFloating() */
void ToggleFocusedWindowFloating(); // calls window->tree function
/* Add then Remove Window from Tree */
void DetachAndReinsertWindow(int WindowID, int Degrees);
/* Toggle window filling parent container */
void ToggleFocusedWindowParent();
/* Toggle window filling fullscreen */
void ToggleFocusedWindowFullscreen();
/* Swapping Nodes */
void SwapFocusedWindowWithMarked();
void SwapFocusedWindowDirected(int Degrees);
void SwapFocusedWindowWithNearest(int Shift);

/* Automatically find current window and call the ModifySubtree function */
void ModifySubtreeSplitRatioFromWindow(const double &Offset);
